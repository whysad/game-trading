<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hongtianren.mapper.UserMapper">

	<resultMap id="userMapper" type="user">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="password" property="password"/>
		<result column="create_time" property="createTime"/>
		<result column="update_time" property="updateTime"/>
		<result column="email" property="email"/>
		<result column="phone" property="phone"/>
		<result column="balance" property="balance"/>
		<result column="last_login_date" property="lastLoginDate"/>
		<result column="last_login_ip" property="lastLoginIp"/>		
		<collection property="roles" ofType="String" >
			<result column="role"/>
		</collection>
		<collection property="permissions" ofType="String" >
			<result column="path"/>
		</collection>
	</resultMap>
	
	<select id="loadUserByUsername" resultMap="userMapper">
		SELECT
			u.*, 
			r.`name` AS role,
			rs.path
		FROM
			`user` u
		LEFT JOIN r_user_role rur ON u.id = rur.`user`
		AND u.username = #{username} 
		or u.email = #{username} 
		or u.phone = #{username}
		INNER JOIN role r ON rur.role = r.id
		LEFT JOIN r_role_resource rrr ON r.id = rrr.role
		LEFT JOIN resource rs ON rrr.resource = rs.id
	</select>
	
	<select id="loadUserBasicByUsername" resultType="user">
		select * from user 
		where 
		username = #{username} 
		or email = #{username} 
		or phone = #{username}
	</select>
	
	<insert id="register" parameterType="user" useGeneratedKeys="true" keyProperty="id">
		insert into user (create_time, update_time, 
	      username, password, phone, 
	      email)
	    values ( #{createTime}, #{updateTime}, 
	      #{username}, #{password}, #{phone}, 
	      #{email})
	</insert>
	
	<!-- 设置用户角色 -->
	<insert id="setUpRole">
		INSERT INTO r_user_role (`user`, role)
			VALUES
				(#{user},#{role})
	</insert>
	
	<!-- 根据角色获取用户 -->
	<select id="getUsersByRole" resultType="User">
		SELECT
			u.*
		FROM
			`user` u
		LEFT JOIN r_user_role rur ON u.id = rur.`user`
		<foreach collection="roles" item="role" open="where rur.role IN (" close=")" separator=",">
			#{role}
		</foreach>
	</select>
	
	<update id="update" parameterType="User">
    update user
    <set>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
      <if test="username != null">
        username = #{username},
      </if>
      <if test="password != null">
        password = #{password},
      </if>
      <if test="phone != null">
        phone = #{phone},
      </if>
      <if test="email != null">
        email = #{email},
      </if>
      <if test="lastLoginDate != null">
        last_login_date = #{lastLoginDate},
      </if>
      <if test="lastLoginIp != null">
        last_login_ip = #{lastLoginIp},
      </if>
      <if test="balance != null">
        balance = #{balance},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
	
</mapper>